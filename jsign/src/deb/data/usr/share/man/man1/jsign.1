.\" Manpage for jsign.
.TH man 1 "25 Mar 2021" "@VERSION@" "jsign man page"

.SH NAME
jsign \- sign and timestamp executable files for Windows, Microsoft Installers (MSI), Cabinet files (CAB), Catalog files (CAT) and scripts (PowerShell, VBScript, JScript, WSF)

.SH SYNOPSIS
.B jsign
[OPTIONS] [FILE]...

.SH DESCRIPTION
Jsign is a Java implementation of Microsoft Authenticode that lets you sign
and timestamp executable files for Windows, Microsoft Installers (MSI), Cabinet
files (CAB), Catalog files (CAT) and scripts. Jsign is platform independent and
provides an alternative to native tools like signcode/signtool on Windows or the
Mono development tools on Unix systems.

Jsign can use private keys and certificates in various formats, either Java keystores,
PKCS#12 keystores, PKCS#11 hardware tokens, SPC/PVK files or from cloud key management
systems.

.SH OPTIONS

.TP
.B -s, --keystore <FILE>
Either the keystore file containing the certificate and the private key used for
signing, the SunPKCS11 configuration file when a PKCS#11 token is used, or the cloud
keystore name. For file based keystores this option must be specified unless
the keyfile and certfile options are already specified.

.TP
.B --storepass <PASSWORD>
The password to open the keystore. The password can be loaded from a file by using
the file: prefix followed by the path of the file, or from an environment variable
by using the env: prefix followed by the name of the variable.

.TP
.B --storetype <TYPE>
The type of the keystore:
.br
- JKS           : Java keystore (.jks files)
.br
- JCEKS         : SunJCE keystore (.jceks files)
.br
- PKCS12        : Standard PKCS#12 keystore (.p12 or .pfx files)
.br
- PKCS11        : PKCS#11 hardware token
.br
- NITROKEY      : Nitrokey HSM
.br
- OPENSC        : Smart Card HSM
.br
- YUBIKEY       : YubiKey security key (requires ykcs11)
.br
- AWS           : AWS Key Management Service
.br
- AZUREKEYVAULT : Azure Key Vault key management system
.br
- DIGICERTONE   : DigiCert ONE Secure Software Manager
.br
- ESIGNER       : SSL.com eSigner
.br
- GOOGLECLOUD   : Google Cloud KMS
.br
This option is not required for file based keystores (JKS, JCEKS and PKCS12).

.TP
.B -a, --alias <NAME>
The alias of the certificate used for signing in the keystore. This option
is mandatory if the keystore option is specified and if the keystore contains more
than one alias.

.TP
.B --keypass <PASSWORD>
The password of the private key. When using a keystore, this parameter can be
omitted if the keystore shares the same password. The password can be loaded
from a file by using the file: prefix followed by the path of the file, or from
an environment variable by using the env: prefix followed by the name of the variable.

.TP
.B --keyfile <FILE>
The file containing the private key. PEM and PVK files are supported. This option
is used in combination with the certfile option.

.TP
.B -c, --certfile <FILE>
The file containing the PKCS#7 certificate chain (.p7b or .spc files). This
option is used in combination with the keyfile option.

.TP
.B -t, --tsaurl <URL>
The URL of the timestamping authority, either RFC 3161 or Authenticode services.
You can use the Sectigo or the DigiCert services:
.br
- http://timestamp.sectigo.com
.br
- http://timestamp.digicert.com

Several URLs separated by a comma can be specified to fallback on alternative servers.

.TP
.B -m, --tsmode <MODE>
The timestamping mode (RFC3161 or Authenticode). The default mode is Authenticode.

.TP
.B -r, --tsretries <NUMBER>
The number of retries for timestamping (default to 3 attempts).

.TP
.B -w, --tsretrywait <SECONDS>
The number of seconds to wait between timestamping retries (10 seconds by default).

.TP
.B -n, --name <NAME>
The name of the application. This is an optional information embedded in the signature.

.TP
.B -u, --url <URL>
The URL of the application. This is an optional information embedded in the signature.

.TP
.B --proxyUrl <URL>
The URL of the HTTP proxy.

.TP
.B --proxyUser <NAME>
The user for the HTTP proxy. If an user is needed.

.TP
.B --proxyPass <PASSWORD>
The password for the HTTP proxy user. If an user is needed.

.TP
.B --replace
Tells if previous signatures should be replaced. By default the new signature is appended to the existing ones.

.TP
.B -e, --encoding <ENCODING>
The encoding of the script to be signed (UTF-8 by default, or the encoding specified by the byte order mark if there is one).

.TP
.B --detached
Tells if a detached signature should be generated or reused. The detached signature
is a file in the same directory using the name of the file signed with the .sig
suffix added (for example application.exe.sig).
.RS
.IP \- 2
If the signature doesn't exist, the file is signed as usual and the detached signature is generated.
.IP \-
If the signature exists it is attached to the file, replacing any existing signature
(in this case the private key isn't used for signing and no timestamping is performed).
.RE

.TP
.B -h, --help
Print the help


.SH EXAMPLES

.TP
Signing with a PKCS#12 keystore and timestamping:

jsign --keystore keystore.p12 --alias test --storepass password \\
      --tsaurl http://timestamp.sectigo.com application.exe


.TP
Signing with a SPC certificate and a PVK key:

jsign --certfile certificate.spc --keyfile key.pvk --keypass password installer.msi


.TP

Signing with a YubiKey:

When using a Yubikey, the alias is required only if the device contains more than one certificate.
The certificate is specified by its name (typically "X.509 Certificate for Digital Signature" for
the slot 9c, or "X.509 Certificate for PIV Authentication" for the slot 9a). The ykcs11 library
from the Yubico PIV Tool must be installed on the system at the default location. The library
is provided by the yubico-piv-tool package on Fedora, and by the ykcs11 package on Debian/Ubuntu.

jsign --storetype YUBIKEY --certfile full-chain.pem --storepass 123456 application.exe


.TP

Signing with a Nitrokey HSM:

Signing with a Nitrokey requires the installation of the OpenSC PKCS#11 module. The module
is provided by the opensc package on Fedora, and by the opensc-pkcs11 package on Debian/Ubuntu.

jsign --storetype NITROKEY --alias test --certfile full-chain.pem --storepass 123456 application.exe


.TP

Signing with a smart card HSM:

Signing with a smart card HSM requires the installation of the OpenSC PKCS#11 module. The module
is provided by the opensc package on Fedora, and by the opensc-pkcs11 package on Debian/Ubuntu.

jsign --storetype OPENSC --alias test --certfile full-chain.pem --storepass 123456 application.exe

If multiple devices are connected, the keystore parameter can be used to specify the name of the one to use.


.TP

Signing with AWS Key Management Service:

AWS Key Management Service stores only the private key, the certificate must be provided separately.
The keystore parameter references the AWS region. The AWS access key, secret key, and optionally the
session token, are concatenated and used as the storepass. The alias can specify either the key id
or an alias.

jsign --storetype AWS --keystore eu-west-3 \\
      --storepass "<access-key>|<secret-key>|<session-token>" \\
      --alias 12345678-abcd-1234-cdef-1234567890ab \\
      --certfile full-chain.pem application.exe


.TP

Signing with Azure Key Vault:

Certificates and keys stored in the Azure Key Vault key management system can be used with:

jsign --storetype AZUREKEYVAULT --keystore vaultname --alias test \\
      --storepass <api-access-token> application.exe


.TP

Signing with DigiCert ONE:

Certificates and keys stored in the DigiCert ONE Secure Software Manager can be used directly without installing
the DigiCert client tools. It requires an API key and a PKCS#12 keystore holding a client certificate for the
authentication.

jsign --storetype DIGICERTONE --alias test \\
      --storepass "<api-key>|/path/to/Certificate_pkcs12.p12|<password>" application.exe


.TP

Signing with SSL.com eSigner:

When signing with the SSL.com eSigner service, the SSL.com username and password are used as the keystore password,
and the base64 encoded TOTP secret is used as the key password:

jsign --storetype ESIGNER --storepass "&lt;username&gt;|&lt;password&gt;" \\
      --alias 8b072e22-7685-4771-b5c6-48e46614915f \\
      --keypass &lt;totp-secret&gt; application.exe

SSL.com provides a sandbox environment, to use a test certificate simply add the parameter
"--keystore https://cs-try.ssl.com".


.TP

Signing with Google Cloud KMS:

Google Cloud KMS stores only the private key, the certificate must be provided separately. The keystore parameter
references the path of the keyring. The alias can specify either the full path of the key, or only the short name. If
the version is omitted the most recent one will be picked automatically.

jsign --storetype GOOGLECLOUD --storepass <api-access-token> \\
      --keystore projects/first-rain-123/locations/global/keyRings/mykeyring \\
      --alias test --certfile full-chain.pem application.exe


.SH REPORTING BUGS
Bugs and suggestions can be reported to the project home page: https://ebourg.github.io/jsign

.SH AUTHOR
Emmanuel Bourg (ebourg@apache.org)
